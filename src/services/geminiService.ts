import { GoogleGenAI, Modality } from "@google/genai";
import type { StoryFormData } from "../components/StoryForm";

// üß† –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ —Å–∫–∞–∑–∫–∏
export async function generateStoryPart(
  formData: StoryFormData,
  storyHistory: string,
  isFirstPart: boolean
): Promise<{ storyPart: string; choices: string[] }> {
  const apiKey = process.env.API_KEY;
  if (!apiKey) {
    throw new Error("API_KEY is not available. Make sure it is set in your environment variables.");
  }

  const ai = new GoogleGenAI({ apiKey });

  const prompt = isFirstPart
    ? `–°–æ–∑–¥–∞–π –Ω–∞—á–∞–ª–æ —Å–∫–∞–∑–∫–∏ –¥–ª—è —Ä–µ–±–µ–Ω–∫–∞ –ø–æ –∏–º–µ–Ω–∏ ${formData.name}. 
      –ì–ª–∞–≤–Ω—ã–π –≥–µ—Ä–æ–π: ${formData.character}. 
      –ú–µ—Å—Ç–æ –¥–µ–π—Å—Ç–≤–∏—è: ${formData.location}. 
      –°—Ç–∏–ª—å: –¥–æ–±—Ä—ã–π, –≤–æ–ª—à–µ–±–Ω—ã–π, –ø–æ–Ω—è—Ç–Ω—ã–π –¥–µ—Ç—è–º. 
      –°–¥–µ–ª–∞–π —Ç–µ–∫—Å—Ç –∫—Ä–∞—Å–∏–≤—ã–º –∏ –æ–±—Ä–∞–∑–Ω—ã–º.`
    : `–ü—Ä–æ–¥–æ–ª–∂–∏ —Å–∫–∞–∑–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∏—Å—Ç–æ—Ä–∏–∏:
      ${storyHistory}
      –î–æ–±–∞–≤—å –Ω–æ–≤—É—é —á–∞—Å—Ç—å —Å–∫–∞–∑–∫–∏. 
      –°–æ—Ö—Ä–∞–Ω–∏ —Å—Ç–∏–ª—å –∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π.`;

  const response = await ai.models.generateContent({
    model: "gemini-1.5-flash",
    contents: [{ parts: [{ text: prompt }] }],
  });

  const storyPart = response.candidates?.[0]?.content?.parts?.[0]?.text?.trim() || "";

  // –ï—Å–ª–∏ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è —Å–∫–∞–∑–∫–∞ ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –≤—ã–±–æ—Ä–∞
  const choices =
    formData.isInteractive && isFirstPart
      ? ["–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ", "–ò–∑–º–µ–Ω–∏—Ç—å —Ö–æ–¥ —Å–æ–±—ã—Ç–∏–π", "–ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–∫–∞–∑–∫—É"]
      : [];

  return { storyPart, choices };
}

// üîä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–∑–≤—É—á–∫–∏ —Å–∫–∞–∑–∫–∏
export async function generateAudio(storyText: string, voiceId: string): Promise<string> {
  if (!storyText.trim()) {
    return "";
  }

  const apiKey = process.env.API_KEY;
  if (!apiKey) {
    throw new Error("API_KEY is not available. Make sure it is set in your environment variables.");
  }

  const ai = new GoogleGenAI({ apiKey });

  const response = await ai.models.generateContent({
    model: "gemini-2.5-flash-preview-tts",
    contents: [{ parts: [{ text: storyText }] }],
    config: {
      responseModalities: [Modality.AUDIO],
      speechConfig: {
        voiceConfig: {
          prebuiltVoiceConfig: { voiceName: voiceId },
        },
      },
    },
  });

  const base64Audio = response.candidates?.[0]?.content?.parts?.[0]?.inlineData?.data;
  if (!base64Audio) {
    throw new Error("No audio data received from API.");
  }

  return base64Audio;
}
